@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@currentTime</td>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}


@code{
private System.Timers.Timer timer;
    private string currentTime = DateTime.Now.ToString("hh:mm:ss tt");

    protected override void OnInitialized()
    {
        timer = new System.Timers.Timer(10000);
        timer.Elapsed += (sender, args) => Timer_Elapsed(sender,args);
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void Timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e  )
    {
        currentTime = DateTime.Now.ToString("hh:mm:ss tt");
        StateHasChanged();
    }
    }
@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; } = default!;

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }    

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556); // Conversion from Celsius to Fahrenheit
    }
}
